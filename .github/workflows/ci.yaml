name: product-catalog-ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go 1.22
        uses: actions/setup-go@v2
        with:
          go-version: 1.22

      - name: Build Application
        run: |
          cd src/product-catalog
          go mod download
          go build -o product-catalog-service main.go

      - name: Run Unit Tests
        run: |
          cd src/product-catalog
          go test ./...

  code-quality:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Run GolangCI-Lint for immediate code quality checks.
      - name: Run GolangCI-Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.55.2
          working-directory: src/product-catalog

      # Install SonarScanner CLI.
      - name: Install SonarScanner CLI
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          sudo mv sonar-scanner-cli-4.8.0.2856-linux /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      # Run SonarQube Analysis against your self-hosted SonarQube server.
      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
            -Dsonar.sources=src/product-catalog \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: build
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.run_id }} -f src/product-catalog/Dockerfile src/product-catalog

      # Scan the built Docker image with Trivy BEFORE pushing.
      - name: Scan Docker Image with Trivy
        id: trivy_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.run_id }}
          severity: 'HIGH,CRITICAL'
          format: 'table'

      # Stop the workflow if vulnerabilities are found.
      - name: Fail If Vulnerabilities Are Found
        if: failure()
        run: |
          echo "Trivy scan detected vulnerabilities. Failing the build."
          exit 1

      # Only push the image if the Trivy scan passes (i.e., no vulnerabilities found).
      - name: Login to DockerHub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push Docker Image
        if: success()
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.run_id }}

  updatek8s:
    runs-on: ubuntu-latest
    needs: docker
    if: success()  # Only execute if Docker image was successfully built and pushed
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN}}

      - name: Update Kubernetes Manifest
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.run_id }}|" kubernetes/productcatalog/deploy.yaml

      - name: Commit and Push Manifest Changes
        run: |
          git config --global user.email "${{ secrets.GIT_AUTHOR_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git add kubernetes/productcatalog/deploy.yaml
          git commit -m "[CI]: Update product-catalog image tag"
          git push origin HEAD:main -f